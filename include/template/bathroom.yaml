- trigger:
    - trigger: state
      entity_id: sensor.bathroom_illuminance
    - trigger: state
      entity_id: light.bathroom_lights
      to: "on"
  sensor:
    - unique_id: "bathroom_illuminance_lights_off"
      name: "Bathroom Illuminance Lights Off"
      unit_of_measurement: "lx"
      state_class: measurement
      device_class: illuminance
      state: >
        {% if is_state('light.bathroom_ambient_lights', 'on') %}
          {{ state_attr('sensor.bathroom_illuminance_lights_off', 'last_lights_off_illuminance') }}
        {% else %}
          {{ states('sensor.bathroom_illuminance') }}
        {% endif %}
      attributes:
        last_lights_off_illuminance: >
          {% if is_state('light.bathroom_ambient_lights', 'off') %}
            {{ states('sensor.bathroom_illuminance') }}
          {% else %}
            {{ state_attr('sensor.bathroom_illuminance_lights_off', 'last_lights_off_illuminance') }}
          {% endif %}
      availability: >
        {% if is_state('light.bathroom_lights', 'on') and state_attr('sensor.bathroom_illuminance_lights_off', 'last_lights_off_illuminance') == None %}
          false
        {% else %}
          true
        {% endif %}
- binary_sensor:
    - unique_id: bathroom_daylight
      name: "Bathroom Daylight"
      device_class: light
      state: >
        {% set threshold = states('input_number.bathroom_daylight_illuminance_threshold') | float %}
        {% set illuminance = states('sensor.bathroom_illuminance_lights_off') %}
        {% if illuminance in ['unknown', 'unavailable'] %}
          {% set illuminance = states('sensor.bathroom_illuminance') %}
        {% endif %}
        {% if illuminance in ['unknown', 'unavailable'] %}
          true
        {% else %}
          {{ illuminance | float > threshold }}
        {% endif %}
- sensor:
    - name: "Bathroom Temperature Level"
      unique_id: bathroom_temperature_level
      device_class: enum
      state: >
        {% set temp = states('sensor.bathroom_temperature') | float %}
        {% if temp < 17 %}
          Cold
        {% elif 17 <= temp < 19 %}
          Cool
        {% elif 19 <= temp < 21 %}
          Mild
        {% elif 21 <= temp < 23 %}
          Warm
        {% elif 23 <= temp < 25 %}
          Hot
        {% elif 25 <= temp %}
          Very Hot
        {% else %}
          Unknown
        {% endif %}
      icon: >
        {% set temp = states('sensor.bathroom_temperature') | float %}
        {% if temp < 17 %}
          mdi:thermometer-low
        {% elif 17 <= temp < 19 %}
          mdi:thermometer-low
        {% elif 19 <= temp < 21 %}
          mdi:thermometer
        {% elif 21 <= temp < 23 %}
          mdi:thermometer-high
        {% elif 23 <= temp < 25 %}
          mdi:thermometer-high
        {% elif 25 <= temp %}
          mdi:thermometer-alert
        {% else %}
          mdi:thermometer
        {% endif %}
      availability: >
        {% if states('sensor.bathroom_temperature') not in ['unavailable', 'unknown'] %}
          true
        {% else %}
          false
        {% endif %}
- sensor:
    - name: "Bathroom Absolute Humidity"
      unique_id: bathroom_absolute_humidity
      unit_of_measurement: "g/mÂ³"
      state: >
        {% set T = states('sensor.bathroom_temperature') | float %}
        {% set RH = states('sensor.bathroom_relative_humidity') | float %}
        {% set es = 6.112 * (2.718281828459 ** ((17.67 * T) / (T + 243.5))) %}
        {% set AH = (es * RH * 2.1674) / (T + 273.15) %}
        {{ AH | round(2) }}
      state_class: "measurement"
      availability: >
        {{ states('sensor.bathroom_temperature') not in ['unavailable', 'unknown', 'none'] and
            states('sensor.bathroom_relative_humidity') not in ['unavailable', 'unknown', 'none'] }}
- binary_sensor:
    - name: "Bathroom Window Opening Recommendation"
      unique_id: bathroom_window_opening_recommendation
      device_class: window
      state: >
        {% set indoor_temperature = states('sensor.bathroom_temperature') | float %}
        {% set outdoor_temperature = states('sensor.outdoor_temperature') | float %}
        {% set indoor_rh = states('sensor.bathroom_relative_humidity') | float %}
        {% set outdoor_rh = states('sensor.outdoor_relative_humidity') | float %}

        {# Calculate SVP for indoor and outdoor conditions using the Magnus formula #}
        {% set indoor_svp = 6.112 * (2.718281828459 ** ((17.67 * indoor_temperature) / (indoor_temperature + 243.5))) %}
        {% set outdoor_svp = 6.112 * (2.718281828459 ** ((17.67 * outdoor_temperature) / (outdoor_temperature + 243.5))) %}

        {# Calculate AVP for indoor and outdoor conditions #}
        {% set indoor_avp = (indoor_rh / 100) * indoor_svp %}
        {% set outdoor_avp = (outdoor_rh / 100) * outdoor_svp %}

        {# Calculate Humidity Ratios for indoor and outdoor air #}
        {% set indoor_humidity_ratio = indoor_avp / indoor_svp %}
        {% set outdoor_humidity_ratio = outdoor_avp / outdoor_svp %}

        {# Calculate Dew Points for indoor and outdoor conditions #}
        {% set indoor_dew_point = (243.5 * (log(indoor_rh / 100) + ((17.67 * indoor_temperature) / (243.5 + indoor_temperature)))) / (17.67 - log(indoor_rh / 100) - ((17.67 * indoor_temperature) / (243.5 + indoor_temperature))) %}
        {% set outdoor_dew_point = (243.5 * (log(outdoor_rh / 100) + ((17.67 * outdoor_temperature) / (243.5 + outdoor_temperature)))) / (17.67 - log(outdoor_rh / 100) - ((17.67 * outdoor_temperature) / (243.5 + outdoor_temperature))) %}

        {# Determine if it's better to open the window based on all conditions #}
        {{ outdoor_temperature > 10 and outdoor_humidity_ratio < indoor_humidity_ratio and outdoor_dew_point < indoor_dew_point }}
      icon: >
        {% if is_state('binary_sensor.open_bathroom_window', 'on') %}
          mdi:window-open
        {% else %}
          mdi:window-closed
        {% endif %}
      availability: >
        {{ states('sensor.bathroom_temperature') not in ['unavailable', 'unknown', 'none'] and
           states('sensor.outdoor_temperature') not in ['unavailable', 'unknown', 'none'] and
           states('sensor.bathroom_relative_humidity') not in ['unavailable', 'unknown', 'none'] and
           states('sensor.outdoor_relative_humidity') not in ['unavailable', 'unknown', 'none'] }}
- trigger:
    - trigger: state
      entity_id: binary_sensor.bathroom_toilet_occupancy
      to: "on"
      for:
        minutes: 1
    - trigger: state
      entity_id: binary_sensor.bathroom_toilet_occupancy
      to: "off"
      for:
        minutes: 5
  binary_sensor:
    - unique_id: bathroom_toilet_ventilation
      name: "Bathroom Toilet Ventilation"
      state: >-
        {{ is_state('binary_sensor.bathroom_toilet_occupancy', 'on') }}

- trigger:
    - trigger: template
      value_template: >-
        {{ states('sensor.bathroom_relative_humidity') | float > (states('sensor.bathroom_relative_humidity_median') | float + 10) }}
      for: "00:00:30"
    - trigger: template
      value_template: >-
        {{ states('sensor.bathroom_relative_humidity') | float < (states('sensor.bathroom_relative_humidity_median') | float + 3) }}
      for: "00:05:00"
  binary_sensor:
    - unique_id: bathroom_humidity_ventilation
      name: "Bathroom Humidity Ventilation"
      state: >-
        {{ (states('sensor.bathroom_relative_humidity') | float) > (states('sensor.bathroom_relative_humidity_median') | float + 10) and
          (states('sensor.bathroom_relative_humidity') | float) < (states('sensor.bathroom_relative_humidity_median') | float + 3) }}
