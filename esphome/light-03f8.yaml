substitutions:
  device_name: light-03f8

esphome:
  name: ${device_name}
  friendly_name: ${device_name}
  min_version: 2024.7.0

bk72xx:
  board: cb3l

logger:

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password
    id: ota_pass

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: !secret wifi_ssid2
      password: !secret wifi_password

  ap:
    ssid: ${device_name}
    password: !secret wifi_fallback_ap_password

captive_portal:

# Define PWM output channels
output:
  - platform: libretiny_pwm
    pin: P7
    id: output_white
    frequency: 2000 Hz
  - platform: template
    type: float
    id: output_white_2
    write_action:
      - lambda: |-
          static const int pwm_lookup[101] = {
            0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
            21, 22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 48, 51, 54, 57, 
            60, 63, 66, 69, 73, 77, 81, 85, 89, 94, 99, 104, 109, 114, 120, 126, 
            132, 138, 145, 152, 159, 167, 175, 183, 192, 201, 211, 221, 231, 242, 
            253, 265, 277, 290, 304, 318, 333, 348, 364, 381, 399, 417, 436, 456, 
            477, 499, 522, 546, 571, 597, 624, 653, 683, 714, 747, 781, 817, 854, 
            893, 934, 977, 1023
          };

          float clamped_state = std::max(0.0f, std::min(1.0f, state));  // Clamp between 0 and 1
          int index = static_cast<int>(roundf(clamped_state * 100));  // Scale and round to nearest integer
          int pwm_value = pwm_lookup[index];  // Get mapped value
          analogWrite(7, pwm_value);  // Directly write raw PWM value
  - platform: libretiny_pwm
    pin: P8
    id: output_red
    frequency: 2000 Hz
  - platform: template
    type: float
    id: output_red_2
    write_action:
      - lambda: |-
          static const int pwm_lookup[101] = {
            0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
            21, 22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 48, 51, 54, 57, 
            60, 63, 66, 69, 73, 77, 81, 85, 89, 94, 99, 104, 109, 114, 120, 126, 
            132, 138, 145, 152, 159, 167, 175, 183, 192, 201, 211, 221, 231, 242, 
            253, 265, 277, 290, 304, 318, 333, 348, 364, 381, 399, 417, 436, 456, 
            477, 499, 522, 546, 571, 597, 624, 653, 683, 714, 747, 781, 817, 854, 
            893, 934, 977, 1023
          };

          float clamped_state = std::max(0.0f, std::min(1.0f, state));  // Clamp between 0 and 1
          int index = static_cast<int>(roundf(clamped_state * 100));  // Scale and round to nearest integer
          int pwm_value = pwm_lookup[index];  // Get mapped value
          analogWrite(8, pwm_value);  // Directly write raw PWM value
  - platform: libretiny_pwm
    pin: P24
    id: output_green
    frequency: 2000 Hz
  - platform: template
    type: float
    id: output_green_2
    write_action:
      - lambda: |-
          static const int pwm_lookup[101] = {
            0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
            21, 22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 48, 51, 54, 57, 
            60, 63, 66, 69, 73, 77, 81, 85, 89, 94, 99, 104, 109, 114, 120, 126, 
            132, 138, 145, 152, 159, 167, 175, 183, 192, 201, 211, 221, 231, 242, 
            253, 265, 277, 290, 304, 318, 333, 348, 364, 381, 399, 417, 436, 456, 
            477, 499, 522, 546, 571, 597, 624, 653, 683, 714, 747, 781, 817, 854, 
            893, 934, 977, 1023
          };

          float clamped_state = std::max(0.0f, std::min(1.0f, state));  // Clamp between 0 and 1
          int index = static_cast<int>(roundf(clamped_state * 100));  // Scale and round to nearest integer
          int pwm_value = pwm_lookup[index];  // Get mapped value
          analogWrite(24, pwm_value);  // Directly write raw PWM value
  - platform: libretiny_pwm
    pin: P26
    id: output_blue
    frequency: 2000 Hz
  - platform: template
    type: float
    id: output_blue_2
    write_action:
      - lambda: |-
          static const int pwm_lookup[101] = {
            0,1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
            21, 22, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 48, 51, 54, 57, 
            60, 63, 66, 69, 73, 77, 81, 85, 89, 94, 99, 104, 109, 114, 120, 126, 
            132, 138, 145, 152, 159, 167, 175, 183, 192, 201, 211, 221, 231, 242, 
            253, 265, 277, 290, 304, 318, 333, 348, 364, 381, 399, 417, 436, 456, 
            477, 499, 522, 546, 571, 597, 624, 653, 683, 714, 747, 781, 817, 854, 
            893, 934, 977, 1023
          };

          float clamped_state = std::max(0.0f, std::min(1.0f, state));  // Clamp between 0 and 1
          int index = static_cast<int>(roundf(clamped_state * 100));  // Scale and round to nearest integer
          int pwm_value = pwm_lookup[index];  // Get mapped value
          analogWrite(26, pwm_value);  // Directly write raw PWM value

# Define a PWM light
light:
  - platform: rgbw
    name: "Light"
    red: output_red_2
    green: output_green_2
    blue: output_blue_2
    white: output_white_2
    restore_mode: RESTORE_DEFAULT_ON
    color_interlock: True
    gamma_correct: 1.0
